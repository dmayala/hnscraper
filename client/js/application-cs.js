// Generated by CoffeeScript 1.7.1
(function() {
  var App;

  App = {
    'Models': {},
    'ViewModels': {},
    'BindingHandlers': {}
  };

  App.Models.Article = (function() {
    function Article(object) {
      this.rank = ko.observable(object.rank);
      this.title = ko.observable(object.title);
      this.url = ko.observable(object.url);
      this.points = ko.observable(object.points);
      this.username = ko.observable(object.username);
      this.comments = ko.observable(object.comments);
    }

    return Article;

  })();

  App.ViewModels.Articles = (function() {
    function Articles() {
      this.init = (function(_this) {
        return function() {
          return _this.fetch();
        };
      })(this);
      this.headings = ko.observableArray();
      this.keys = ko.observableArray();
      this.activeSort;
      this.fetch = function() {
        return $.get('api/scrape', (function(_this) {
          return function(data) {
            var i, _i, _len;
            for (_i = 0, _len = data.length; _i < _len; _i++) {
              i = data[_i];
              _this.headings.push(new App.Models.Article(i));
            }
            _this.keys($.map(_this.headings()[0], function(index, key) {
              return {
                'sortPropertyName': key,
                'asc': true
              };
            }));
            return _this.activeSort = _this.keys()[0];
          };
        })(this));
      };
      this.sortOrder = (function(_this) {
        return function(key) {
          var ascSort, descSort, prop, sortFunc;
          if (_this.activeSort === key) {
            key.asc = !key.asc;
          } else {
            _this.activeSort = key;
          }
          prop = _this.activeSort.sortPropertyName;
          ascSort = function(a, b) {
            if (a[prop]() < b[prop]()) {
              return -1;
            } else {
              if (a[prop]() > b[prop]()) {
                return 1;
              } else {
                if (a[prop]() === b[prop]()) {
                  return 0;
                } else {
                  return 0;
                }
              }
            }
          };
          descSort = function(a, b) {
            return ascSort(b, a);
          };
          sortFunc = (_this.activeSort.asc ? ascSort : descSort);
          return _this.headings.sort(sortFunc);
        };
      })(this);
      this.init();
    }

    return Articles;

  })();

  App.BindingHandlers.createHeaderRow = function() {
    return ko.bindingHandlers.createHeaderRow = {
      init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var property, _results;
        _results = [];
        for (property in valueAccessor()) {
          _results.push($(element).append("<th>" + property + "</th>"));
        }
        return _results;
      }
    };
  };

  App.BindingHandlers.createTableRow = function() {
    return ko.bindingHandlers.createTableRow = {
      init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var property, _results;
        _results = [];
        for (property in valueAccessor()) {
          _results.push($(element).append("<td data-bind=\"text: " + property + "\"></td>"));
        }
        return _results;
      }
    };
  };

  App.start = function() {
    var i;
    for (i in App.BindingHandlers) {
      App.BindingHandlers[i]();
    }
    return ko.applyBindings(new App.ViewModels.Articles());
  };

  $(App.start);

}).call(this);
